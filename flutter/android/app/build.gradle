def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.stinova.connect"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            storeFile file('../other/customers/stino/dmpa.jks')
            storePassword 'fedco22'
            keyAlias 'stinova_dmp_a'
            keyPassword 'fedco22'
        }
        v1 {
            keyAlias 'v1'
            keyPassword 'lacodoma'
            storeFile file('keystore.jks')
            storePassword 'lacodoma'
        }
        v3 {
            keyAlias 'v3e'
            keyPassword 'lacodoma'
            storeFile file('keystore.jks')
            storePassword 'lacodoma'
        }
        rk328 {
            keyAlias 'rk328'
            keyPassword 'android'
            storeFile file('../other/customers/rk328/debug.keystore')
            storePassword 'android'
        }
        rk3399 {
            keyAlias 'keystore'
            keyPassword 'android'
            storeFile file('../other/customers/rk3399/keystore.jks')
            storePassword 'android'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.media:media:1.6.0"
    implementation 'com.github.getActivity:XXPermissions:16.2'
    implementation("org.jetbrains.kotlin:kotlin-stdlib") { version { strictly("$kotlin_version") } }
}

apply plugin: 'com.google.gms.google-services'
